# This is a reusable workflow that can be called from your repository to provide an estimate on a specific template with optional parameter file
# or inline parameters supplied.
name: Estimate From Url

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Which GitHub Environment to use'
        required: false
        type: string
      rg:
        description: 'Resource Group name'
        required: true
        type: string
      aceVersion:
        description: 'Ace version tag'
        required: false
        type: string
        default: '1.3'
      templateFileURL:
        description: 'Template file URL'
        required: true
        type: string
      templateParamFileURL:
        description: 'Template parameters file URL'
        required: false
        type: string
      templateParams:
        description: 'Parameters in Key=Value format. Use spaces to separate multiple params'
        required: false
        default: ''
        type: string
        
  workflow_call:
    inputs:
      environment:
        description: 'Which GitHub Environment to use'
        required: false
        type: string
      rg:
        description: 'Resource Group name'
        required: true
        type: string
      aceVersion:
        description: 'Ace version tag'
        required: false
        type: string
        default: 1.3
      templateFileURL:
        description: 'Template file URL'
        required: true
        type: string
      templateParamFileURL:
        description: 'Template parameters file URL'
        required: false
        type: string
      templateParams:
        description: 'Parameters in Key=Value format. Use spaces to separate multiple params'
        required: false
        default: ''
        type: string
    secrets:
      GH_PAT:
        description: 'Used together with a internal or private hosted repository in order to read the contents.'
        required: false
      AZURE_CLIENT_ID:
        required: true
      AZURE_TENANT_ID:
        required: true
      AZURE_SUBSCRIPTION_ID:
        required: true

permissions:
  id-token: write # The reusable workflow needs to be able to fetch token to log in to Azure.
  contents: read # The reusable workflow needs to be able to read the contents of the repository (used with a public hosted repository).

concurrency: "${{ inputs.environment }}-${{ inputs.rg }}"

jobs:
  Estimate:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    steps:
    - uses: robinraju/release-downloader@v1.8
      name: Download Arm-Estimator release
      id: downloadACE
      with:
        repository: "TheCloudTheory/arm-estimator"
        #We can't use the latest flag when the releases are marked as pre-release. IE. Https://api.github.com/repos/TheCloudTheory/arm-estimator/releases/latest comes back 404
        #latest: ${{ inputs.aceVersion == 'latest' }}
        #tag: ${{ (inputs.aceVersion != 'latest' && inputs.aceVersion) || '' }}
        tag: ${{ inputs.aceVersion }}
        fileName: "linux-x64*.zip"
        
    - name: Unzip and prepare ACE
      run: |
        echo ${{steps.downloadACE.outputs.tag_name}}
        ACEZIP="linux-x64.zip"
        echo $ACEZIP
        unzip $ACEZIP
        chmod +x ./azure-cost-estimator

    - uses: azure/login@v1.5.0
      name: Login to Azure
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        
    - name: Prepare/Check template assets
      id: templateassets
      env:
        templateURL: ${{ inputs.templateFileURL }}
        paramsURL: ${{ inputs.templateParamFileURL }}
      run: |
        templateFileName=${templateURL##*/}
    
        echo "Downloading template: $templateFileName"
        curl -O $templateURL -L -H "Authorization: Token ${{ secrets.GH_PAT }}"
        if [ $? -ne 0 ]; then
          echo "Failed to download the template."
          exit 1
        fi
      
        if [ ! -z $paramsURL ]; then
          paramsFileName=${paramsURL##*/}
          echo "Downloading parameter file: $paramsFileName"
          curl -O $paramsURL -L -H "Authorization: Token ${{ secrets.GH_PAT }}"
          if [ $? -ne 0 ]; then
            echo "Failed to download the parameter file."
            exit 1
          fi
      
          ls -l
      
          echo "template=$templateFileName" >> $GITHUB_OUTPUT
          echo "params=$paramsFileName" >> $GITHUB_OUTPUT
        else
          ls -l
      
          echo "template=$templateFileName" >> $GITHUB_OUTPUT
        fi
  
    - name: Estimate
      id: ace
      env:
        templateParams: ${{ inputs.templateParams }}
      run: |
        if [ -n "$templateParams" ]; then 
          templateParamsInlined=$(echo --inline ${templateParams//[' ']/ --inline })
        fi
      
        ls
      
        template="${{ steps.templateassets.outputs.template }}"
        rg="${{ inputs.rg }}"
      
        if [ -n "${{ steps.templateassets.outputs.params }}" ]; then
          params="${{ steps.templateassets.outputs.params }}"
          echo "Estimating template $template with parameter file $params and inline parameters $templateParamsInlined - deploying into resource group $rg"
          ./azure-cost-estimator $template ${{ secrets.AZURE_SUBSCRIPTION_ID }} $rg --parameters $params $templateParamsInlined --generateJsonOutput --jsonOutputFilename estimate
        else
          if [ -n "$templateParamsInlined" ]; then
            echo "Estimating template $template with inline parameters $templateParamsInlined - deploying into resource group $rg"
            ./azure-cost-estimator $template ${{ secrets.AZURE_SUBSCRIPTION_ID }} $rg $templateParamsInlined --generateJsonOutput --jsonOutputFilename estimate
          else
            echo "Estimating template $template - deploying into resource group $rg"
            ./azure-cost-estimator $template ${{ secrets.AZURE_SUBSCRIPTION_ID }} $rg --generateJsonOutput --jsonOutputFilename estimate
          fi
        fi
      
        ls
        
    - uses: actions/upload-artifact@v3.1.3
      name: Save Estimate Artifact
      with:
        name: estimate
        path: estimate.json

    - name: Job summary
      run: |
        TOTALCOST=$(cat estimate.json | jq -r '.TotalCost')
        CURRENCY=$(cat estimate.json | jq -r '.Currency')
        echo $TOTALCOST $CURRENCY
        printf "## Azure Cost Estimate ðŸ’¸\n\nMonthly cost estimate : $TOTALCOST $CURRENCY" >> $GITHUB_STEP_SUMMARY